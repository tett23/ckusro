{"version":3,"sources":["models/RepoPath.ts","Repository.ts","Repositories.ts","ckusroCore.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { join } from 'path';\n\nexport type RepoPath = {\n  domain: string;\n  user: string;\n  name: string;\n};\n\nexport function toPath(base: string, { domain, user, name }: RepoPath) {\n  return join('/', base, domain, user, name);\n}\n\nexport function gitDir(base: string, repoPath: RepoPath): string {\n  return join(toPath(base, repoPath), '.git');\n}\n\nexport function url2RepoPath(url: string): RepoPath | Error {\n  const items = url.split(/[@/:]/);\n\n  const name = (items.pop() || '').split('.')[0];\n  const user = items.pop() || '';\n  const domain = items.pop() || '';\n  const ret = {\n    domain,\n    user,\n    name,\n  };\n\n  const invalid = Object.values(ret).some((item) => item.length === 0);\n  if (invalid) {\n    return new Error(`Malformed URL. url=${url}`);\n  }\n\n  return ret;\n}\n","import * as Git from 'isomorphic-git';\nimport { CkusroConfig } from './models/CkusroConfig';\nimport {\n  BlobObject,\n  CommitObject,\n  GitObject,\n  TreeObject,\n} from './models/GitObject';\nimport { gitDir, RepoPath } from './models/RepoPath';\n\nexport type Repository = ReturnType<typeof repository>;\n\nexport function repository(\n  config: CkusroConfig,\n  coreId: string,\n  repoPath: RepoPath,\n) {\n  return {\n    headOid: () => headOid(config, coreId, repoPath),\n    headCommitObject: () => headCommitObject(config, coreId, repoPath),\n    headRootTree: () => headRootTree(config, coreId, repoPath),\n    readTree: (oid: string) => readTree(config, coreId, repoPath, oid),\n  };\n}\n\nexport async function headOid(\n  config: CkusroConfig,\n  coreId: string,\n  repoPath: RepoPath,\n): Promise<string | Error> {\n  const path = gitDir(config.base, repoPath);\n  const headOid = await (async () =>\n    Git.resolveRef({\n      core: coreId,\n      gitdir: path,\n      ref: 'HEAD',\n    }))().catch((err) => err);\n  if (headOid instanceof Error) {\n    return headOid;\n  }\n\n  return headOid;\n}\n\nexport async function headCommitObject(\n  config: CkusroConfig,\n  coreId: string,\n  repoPath: RepoPath,\n): Promise<CommitObject | Error> {\n  const oid = await headOid(config, coreId, repoPath);\n  if (oid instanceof Error) {\n    return oid;\n  }\n\n  const commit = await fetchObject(config, coreId, repoPath, oid);\n  if (commit instanceof Error) {\n    return commit;\n  }\n  if (commit.type !== 'commit') {\n    return new Error('Invalid object type.');\n  }\n\n  return commit;\n}\n\nexport async function headRootTree(\n  config: CkusroConfig,\n  coreId: string,\n  repoPath: RepoPath,\n): Promise<TreeObject | Error> {\n  const commit = await headCommitObject(config, coreId, repoPath);\n  if (commit instanceof Error) {\n    return commit;\n  }\n\n  const tree = await fetchObject(config, coreId, repoPath, commit.content.tree);\n  if (tree instanceof Error) {\n    return tree;\n  }\n  if (tree.type !== 'tree') {\n    return new Error('Invalid object type.');\n  }\n\n  return tree;\n}\n\nexport async function readTree(\n  config: CkusroConfig,\n  coreId: string,\n  repoPath: RepoPath,\n  oid: string,\n): Promise<Array<TreeObject | BlobObject> | Error> {\n  const tree = await fetchObject(config, coreId, repoPath, oid);\n  if (tree instanceof Error) {\n    return tree;\n  }\n  if (tree.type !== 'tree') {\n    return new Error('Invalid object type.');\n  }\n\n  const entries = await (async () => {\n    const ps = tree.content.map(async (item) => {\n      console.log(item);\n      const entry = await fetchObject(config, coreId, repoPath, item.oid);\n      if (entry instanceof Error) {\n        throw Error;\n      }\n      if (entry.type === 'commit' || entry.type === 'tag') {\n        throw new Error('Invalid object type.');\n      }\n\n      return entry;\n    });\n\n    return await Promise.all(ps);\n  })().catch((err: Error) => err);\n\n  return entries;\n}\n\nasync function fetchObject(\n  config: CkusroConfig,\n  coreId: string,\n  repoPath: RepoPath,\n  oid: string,\n): Promise<GitObject | Error> {\n  const path = gitDir(config.base, repoPath);\n  const objectDescription = await (async () =>\n    Git.readObject({\n      core: coreId,\n      gitdir: path,\n      oid,\n    }))().catch((err: Error) => err);\n  if (objectDescription instanceof Error) {\n    return objectDescription;\n  }\n\n  const { type, object } = objectDescription;\n  switch (type) {\n    case 'commit':\n      return { oid, type: 'commit', content: object as Git.CommitDescription };\n    case 'tree':\n      return {\n        oid,\n        type: 'tree',\n        content: (object as Git.TreeDescription).entries,\n      };\n    case 'blob':\n      return { oid, type: 'blob', content: object as Buffer };\n    case 'tag':\n      return { oid, type: 'tag', content: object as Git.TagDescription };\n    default:\n      return new Error('Invalid object type.');\n  }\n}\n","import * as Git from 'isomorphic-git';\nimport { CkusroConfig } from './models/CkusroConfig';\nimport { toPath, url2RepoPath } from './models/RepoPath';\nimport { Repository, repository } from './Repository';\n\nexport type Repositories = ReturnType<typeof repositories>;\n\nexport function repositories(config: CkusroConfig, coreId: string) {\n  return {\n    clone: (url: string) => clone(coreId, config, url),\n  };\n}\n\nexport async function clone(\n  coreId: string,\n  config: CkusroConfig,\n  url: string,\n): Promise<Repository | Error> {\n  const repoPath = url2RepoPath(url);\n  if (repoPath instanceof Error) {\n    return repoPath;\n  }\n\n  const result = await (async () => {\n    await Git.clone({\n      core: coreId,\n      corsProxy: 'https://cors.isomorphic-git.org',\n      dir: toPath(config.base, repoPath),\n      url,\n      singleBranch: true,\n      depth: 1,\n    });\n  })().catch((err) => err);\n  if (result instanceof Error) {\n    return result;\n  }\n\n  return repository(config, coreId, repoPath);\n}\n","import FS from 'fs';\nimport * as Git from 'isomorphic-git';\nimport { CkusroConfig } from './models/CkusroConfig';\nimport { repositories } from './Repositories';\n\nexport default function ckusroCore(\n  config: CkusroConfig,\n  coreId: string,\n  fs: typeof FS,\n) {\n  const core = Git.cores.create(coreId);\n  core.set('fs', fs);\n\n  return {\n    repositories: (() => repositories(config, coreId))(),\n  };\n}\n","import 'core-js/modules/es.array.flat';\nimport 'core-js/modules/es.array.flat-map';\nimport ckusroCore from './ckusroCore';\n\nexport { CkusroConfig } from './models/CkusroConfig';\n\nexport default ckusroCore;\n"]}